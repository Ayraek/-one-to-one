import os
import re
import logging
import asyncpg
import asyncio
from urllib.parse import urlparse

from dotenv import load_dotenv
load_dotenv()

from openai import OpenAI

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from inactivity_middleware import InactivityMiddleware

# --------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# --------------------------

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_IDS = os.getenv("ADMIN_IDS", "")
admin_ids = [int(x.strip()) for x in ADMIN_IDS.split(",")] if ADMIN_IDS else []

# --------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# --------------------------

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)
# –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (15 –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è)
dp.message.middleware(InactivityMiddleware(timeout_seconds=900))
dp.callback_query.middleware(InactivityMiddleware(timeout_seconds=900))

# --------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------

client = OpenAI(api_key=OPENAI_API_KEY)
logging.basicConfig(level=logging.INFO)

# --------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# --------------------------

LEVELS = ["Junior", "Middle", "Senior", "Head of Product", "CPO", "CEO"]

welcome_text = (
    "üí° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ \"One to One Booster bot\" ‚Äî –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ!"
)

TOPICS = [
    "–ì–∏–ø–æ—Ç–µ–∑—ã",
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "–ú–µ—Ç—Ä–∏–∫–∏",
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π",
    "Soft skills",
    "–°—Ç—Ä–∞—Ç–µ–≥–∏—è",
    "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–¥—É–∫—Ç—É"
]

# --------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é
# --------------------------

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="task")],
        [InlineKeyboardButton(text="üìù –≠–∫–∑–∞–º–µ–Ω", callback_data="exam")],
        [InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_grades_menu():
    keyboard = [
        [InlineKeyboardButton(text="üë∂ Junior", callback_data="grade_Junior")],
        [InlineKeyboardButton(text="üßë Middle", callback_data="grade_Middle")],
        [InlineKeyboardButton(text="üë®‚Äçüíº Senior", callback_data="grade_Senior")],
        [InlineKeyboardButton(text="üíº Head of Product", callback_data="grade_Head of Product")],
        [InlineKeyboardButton(text="üìä CPO", callback_data="grade_CPO")],
        [InlineKeyboardButton(text="üöÄ CEO", callback_data="grade_CEO")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_topics_menu():
    buttons = []
    for topic in TOPICS:
        buttons.append([InlineKeyboardButton(text=topic, callback_data=f"topic_{topic}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choose_grade")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_exam_menu():
    keyboard = [[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_news_menu():
    keyboard = [[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_show_answer_menu():
    keyboard = [
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question")],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_admin_menu():
    keyboard = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üí¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# --------------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è
# --------------------------

class RegisterState(StatesGroup):
    name = State()
    age = State()

class TaskState(StatesGroup):
    waiting_for_answer = State()
    waiting_for_clarification = State()
    waiting_for_voice = State()  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
# --------------------------
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
# --------------------------

db_pool = None

async def create_db_pool():
    global db_pool
    url = os.getenv("DATABASE_URL")
    parsed = urlparse(url)
    db_pool = await asyncpg.create_pool(
        user=parsed.username,
        password=parsed.password,
        database=parsed.path.lstrip("/"),
        host=parsed.hostname,
        port=parsed.port or 5432
    )
    async with db_pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY,
                username TEXT,
                name TEXT,
                age INTEGER,
                level TEXT,
                points REAL
            )
        ''')

# --------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# --------------------------

async def add_user_to_db(user_id: int, username: str, name: str, age: int):
    async with db_pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO users (id, username, name, age, level, points)
            VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (id) DO NOTHING
        ''', user_id, username, name, age, "Junior", 0.0)

async def get_user_from_db(user_id: int):
    async with db_pool.acquire() as conn:
        return await conn.fetchrow('SELECT * FROM users WHERE id = $1', user_id)

async def update_user_points(user_id: int, additional_points: float):
    async with db_pool.acquire() as conn:
        await conn.execute(
            'UPDATE users SET points = points + $1 WHERE id = $2',
            additional_points, user_id
        )

async def update_level(user_id: int):
    user = await get_user_from_db(user_id)
    if not user:
        return
    current_level = user["level"]
    points = user["points"]
    cur_index = LEVELS.index(current_level)
    required_points = 50 * (cur_index + 1)
    if points >= required_points and cur_index < len(LEVELS) - 1:
        new_level = LEVELS[cur_index + 1]
        async with db_pool.acquire() as conn:
            await conn.execute(
                'UPDATE users SET level = $1 WHERE id = $2',
                new_level, user_id
            )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—à–µ–Ω —Å {current_level} –¥–æ {new_level}.")

# --------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
# --------------------------

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    user = await get_user_from_db(callback.from_user.id)
    if user:
        name = user["name"]
        age = user["age"]
        level = user["level"]
        points = user["points"]
        text = (
            f"<b>üë§ –ò–º—è:</b> {name}\n"
            f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
            f"<b>üéØ –£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
            f"<b>‚≠ê –ë–∞–ª–ª—ã:</b> {points}\n"
        )
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_main_menu())
    else:
        await callback.message.edit_text(welcome_text, reply_markup=get_main_menu())
    await callback.answer()

@router.callback_query(F.data == "start_answering")
async def start_answering(callback: CallbackQuery):
    await callback.message.answer(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await callback.answer()

@router.message(lambda msg: msg.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ bot_messages)
    data = await state.get_data()
    bot_messages = data.get("bot_messages", [])
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–∞–∂–¥–æ–µ –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    for msg_id in bot_messages:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è bot_messages
    await state.clear()
    await state.update_data(bot_messages=[])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ¬´—á–∏—Å—Ç—ã–π —ç–∫—Ä–∞–Ω¬ª ‚Äì –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
    start_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=start_keyboard)

# –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
@router.message(lambda msg: msg.text == "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
async def start_training(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(bot_messages=[])
    user = await get_user_from_db(message.from_user.id)
    if user:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.", reply_markup=get_main_menu())
    else:
        await message.answer_photo(
            photo="https://i.imgur.com/zIPzQKF.jpeg",
            caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ One to One IT Academy!"
        )
        await message.answer("üëã –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(RegisterState.name)

@router.message(RegisterState.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegisterState.age)

@router.message(RegisterState.age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    data = await state.get_data()
    name = data.get("name")
    await add_user_to_db(message.from_user.id, message.from_user.username or "", name, int(message.text))
    await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_menu())
    await state.clear()

@router.message(lambda msg: msg.text == "/ping")
async def cmd_ping(message: Message):
    await message.answer("üèì Pong!")

# --------------------------
# –ê–¥–º–∏–Ω–∫–∞
# --------------------------

@router.message(lambda message: message.text == "/admin")
async def admin_panel(message: Message, state: FSMContext):
    if message.from_user.id not in admin_ids:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await message.answer("üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=get_admin_menu())

@router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery):
    try:
        async with db_pool.acquire() as conn:
            row = await conn.fetchrow("SELECT COUNT(*) FROM users")
            count = row[0]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        count = "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}"
    await callback.message.edit_text(text, reply_markup=get_admin_menu())
    await callback.answer()

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=get_admin_menu())
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    user = await get_user_from_db(callback.from_user.id)
    if user:
        name = user["name"]
        age = user["age"]
        level = user["level"]
        points = user["points"]
        text = (
            f"<b>üë§ –ò–º—è:</b> {name}\n"
            f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
            f"<b>üéØ –£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
            f"<b>‚≠ê –ë–∞–ª–ª—ã:</b> {points}\n"
        )
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_main_menu())
    else:
        await callback.message.edit_text(welcome_text, reply_markup=get_main_menu())
    await callback.answer()

@router.callback_query(F.data == "news")
async def news_callback(callback: CallbackQuery):
    text = (
        "üì∞ –ù–æ–≤–æ—Å—Ç–∏:\n\n"
        "–ë–æ—Ç —Å–µ–π—á–∞—Å —É–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É, –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –∏ –≤—ã–¥–∞–≤–∞—Ç—å —Ñ–∏–¥–±—ç–∫.\n\n"
        "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–µ—Ç—Å—è:\n"
        "‚Ä¢ –†–∞–∑–¥–µ–ª —ç–∫–∑–∞–º–µ–Ω –ø–æ –∫–∞–∂–¥–æ–º—É –≥—Ä–µ–π–¥—É\n"
        "‚Ä¢ –í—ã–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ —Å–ª–∞–±—ã–º–∏ –º–µ—Å—Ç–∞–º–∏\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–Ω–∏–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞—Ä–ø–ª–∞—Ç –ø–æ —Ä—ã–Ω–∫—É\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_news_menu())
    await callback.answer()

@router.callback_query(F.data == "exam")
async def exam_callback(callback: CallbackQuery):
    text = (
        "üìù –†–∞–∑–¥–µ–ª –≠–∫–∑–∞–º–µ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_exam_menu())
    await callback.answer()

# --------------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: –≤—ã–±–æ—Ä –≥—Ä–µ–π–¥–∞ –∏ —Ç–µ–º—ã
# --------------------------

@router.callback_query(F.data == "task")
async def task_callback(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–µ–π–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=get_grades_menu())
    await callback.answer()

@router.callback_query(F.data == "choose_grade")
async def back_to_grades(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–µ–π–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=get_grades_menu())
    await callback.answer()

@router.callback_query(F.data.startswith("grade_"))
async def handle_grade_selection(callback: CallbackQuery, state: FSMContext):
    selected_grade = callback.data.replace("grade_", "").strip()
    user = await get_user_from_db(callback.from_user.id)
    if not user:
        await callback.message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", reply_markup=get_main_menu())
        await callback.answer()
        return
    current_level = user["level"]
    if selected_grade != current_level:
        await callback.message.answer(
            f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}.",
            reply_markup=get_main_menu()
        )
        await callback.answer()
        return
    await state.update_data(selected_grade=selected_grade)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:", reply_markup=get_topics_menu())
    await callback.answer()

@router.callback_query(F.data.startswith("topic_"))
async def handle_topic_selection(callback: CallbackQuery, state: FSMContext):
    chosen_topic = callback.data.replace("topic_", "").strip()
    data = await state.get_data()
    selected_grade = data.get("selected_grade")
    user = await get_user_from_db(callback.from_user.id)

    if not selected_grade or not user:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≥—Ä–µ–π–¥ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=get_grades_menu())
        await callback.answer()
        return

    question = await generate_question(selected_grade, chosen_topic, user["name"])
    if not question or "–û—à–∏–±–∫–∞" in question:
        await callback.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
            reply_markup=get_main_menu()
        )
        await state.clear()
        await callback.answer()
        return

    await state.set_state(TaskState.waiting_for_answer)
    await state.update_data(question=question, grade=selected_grade, selected_topic=chosen_topic, last_score=0.0)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º"), KeyboardButton(text="üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º")],
            [KeyboardButton(text="‚ùì –£—Ç–æ—á–Ω–∏—Ç—å –ø–æ –≤–æ–ø—Ä–æ—Å—É")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer(
        f"üí¨ –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è {selected_grade} –ø–æ —Ç–µ–º–µ ¬´{chosen_topic}¬ª:\n\n{question}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=keyboard
    )
    await callback.answer()

# --------------------------
# –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏
# --------------------------

@router.callback_query(F.data == "clarify_info")
async def clarify_info_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TaskState.waiting_for_clarification)
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –∑–∞–¥–∞–Ω–∏—é:", reply_markup=types.ReplyKeyboardRemove())
    await callback.answer()

@router.message(TaskState.waiting_for_clarification)
async def process_clarification(message: Message, state: FSMContext):
    data = await state.get_data()
    question = data.get("question")
    user = await get_user_from_db(message.from_user.id)
    name = user["name"] if user else "–∫–∞–Ω–¥–∏–¥–∞—Ç"
    clarification_prompt = (
        f"–í–æ–ø—Ä–æ—Å: {question}\n"
        f"–£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {name}:\n{message.text.strip()}\n\n"
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–º. –ï—Å–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∑–≤—É—á–∏—Ç –∫–∞–∫ '–ú–Ω–µ –æ–ø–∏—Å–∞—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω?', "
        "—Ç–æ –æ—Ç–≤–µ—Ç: '–ß–µ–º –±–æ–ª—å—à–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤—ã –æ–ø–∏—à–µ—Ç–µ, —Ç–µ–º –ª—É—á—à–µ. –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —Ä–∞—Å–∫—Ä–æ–π—Ç–µ –∫–∞–∂–¥—ã–π –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏'. "
        "–ï—Å–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∑–≤—É—á–∏—Ç –∫–∞–∫ '–î–∞–π –º–Ω–µ –ø—Ä–∏–º–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞', —Ç–æ –æ—Ç–≤–µ—Ç: '–í–æ–∑—å–º–∏—Ç–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç X, –æ–Ω –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è'. "
        "–ï—Å–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –Ω–µ –ø–æ —Ç–µ–º–µ, –Ω–∞–ø–æ–º–Ω–∏—Ç–µ: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è'. "
        "–î–∞–π—Ç–µ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ –≤–æ–ø—Ä–æ—Å–∞, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π."
    )
    try:
        clarification_response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ —Å—É—Ç–∏ –∏ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ, –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π."
                    )
                },
                {"role": "user", "content": clarification_prompt}
            ],
            max_tokens=150,
            temperature=0.3
        )
        reply = clarification_response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏: {e}")
        reply = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    reply_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(f"üìé –£—Ç–æ—á–Ω–µ–Ω–∏–µ:\n{reply}\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=reply_keyboard)
    await state.set_state(TaskState.waiting_for_answer)

# --------------------------
# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è TaskState.waiting_for_answer
# --------------------------

@router.message(TaskState.waiting_for_answer)
async def handle_task_answer(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != TaskState.waiting_for_answer.state:
        await message.answer(
            "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Ç–µ–º—É.",
            reply_markup=get_main_menu()
        )
        await state.clear()
        return

    text = message.text.strip()
    logging.info(f"[DEBUG] Received text: {repr(text)}")
    data = await state.get_data()

    if text == "‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å":
        await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –æ—Ç–≤–µ—Ç.", reply_markup=types.ReplyKeyboardRemove())
        return
    # ‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º
    if text == "‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º":
        logging.info("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º'")
        await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –æ—Ç–≤–µ—Ç.", reply_markup=types.ReplyKeyboardRemove())
        return

    # üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º
    if text == "üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º":
        logging.info("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª 'üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º'")
        await state.set_state(TaskState.waiting_for_voice)
        await message.answer("üé§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –æ—Ç–≤–µ—Ç–æ–º.", reply_markup=types.ReplyKeyboardRemove())
        return

    # ‚ùì –£—Ç–æ—á–Ω–∏—Ç—å
    if text == "‚ùì –£—Ç–æ—á–Ω–∏—Ç—å":
        logging.info("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '‚ùì –£—Ç–æ—á–Ω–∏—Ç—å'")
        await state.set_state(TaskState.waiting_for_clarification)
        await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –∑–∞–¥–∞–Ω–∏—é:", reply_markup=types.ReplyKeyboardRemove())
        return

    # üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        logging.info("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'")
        user = await get_user_from_db(message.from_user.id)
        if user:
            profile_text = (
                f"<b>üë§ –ò–º—è:</b> {user['name']}\n"
                f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {user['age']}\n"
                f"<b>üéØ –£—Ä–æ–≤–µ–Ω—å:</b> {user['level']}\n"
                f"<b>‚≠ê –ë–∞–ª–ª—ã:</b> {user['points']}\n\n"
                "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:"
            )
        else:
            profile_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        await message.answer(profile_text, parse_mode="HTML", reply_markup=get_main_menu())
        await state.clear()
        return

    # ‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if text == "‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç":
        logging.info("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'")
        last_question = data.get("last_question")
        last_grade = data.get("last_grade")

        if not last_question or not last_grade:
            await message.answer(
                "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. "
                "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.",
                reply_markup=get_main_menu()
            )
            await state.clear()
            return

        correct_answer = await generate_correct_answer(last_question, last_grade)
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å")],
                [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(f"‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —É—Ä–æ–≤–Ω—è {last_grade}:\n\n{correct_answer}", parse_mode="HTML", reply_markup=kb)
        return

    # ‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    if text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å":
        logging.info("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'")
        grade = data.get("grade")
        topic = data.get("selected_topic")
        if not grade or not topic:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return
        user = await get_user_from_db(message.from_user.id)
        if not user:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        name = user["name"]
        new_question = await generate_question(grade, topic, name)
        logging.info(f"[DEBUG] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {new_question}")
        await state.update_data(question=new_question, last_score=0)
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º"), KeyboardButton(text="üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º")],
                [KeyboardButton(text="‚ùì –£—Ç–æ—á–Ω–∏—Ç—å"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —É—Ä–æ–≤–Ω—è {grade} –ø–æ —Ç–µ–º–µ ¬´{topic}¬ª:\n\n{new_question}", reply_markup=kb)
        return

    # üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    grade = data.get("grade")
    question = data.get("question")
    last_score = data.get("last_score", 0.0)
    if not grade or not question:
        await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user = await get_user_from_db(message.from_user.id)
    if not user:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    student_name = user["name"]
    logging.info(f"[DEBUG] –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {repr(question)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {student_name}")
    feedback_raw = await evaluate_answer(question, message.text, student_name)
    logging.info(f"[DEBUG] RAW FEEDBACK:\n{feedback_raw}")

    if not feedback_raw or "–û—à–∏–±–∫–∞" in feedback_raw:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu()
        )
        await state.clear()
        return

    pattern = r"–ö—Ä–∏—Ç–µ—Ä–∏–∏:\s*(.*?)Score:\s*([\d.]+)\s*Feedback:\s*(.*)"
    match = re.search(pattern, feedback_raw, re.DOTALL)
    if match:
        criteria_block = match.group(1).strip()
        try:
            new_score = float(match.group(2))
        except ValueError:
            new_score = 0.0
        feedback_text = match.group(3).strip()
    else:
        criteria_block = ""
        new_score = 0.0
        feedback_text = feedback_raw.strip()

    if new_score > last_score:
        diff = new_score - last_score
        await update_user_points(message.from_user.id, diff)
        await update_level(message.from_user.id)
        await state.update_data(last_score=new_score)

    result_msg = ""
    if criteria_block:
        result_msg += f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–∏:</b>\n{criteria_block}\n\n"
    result_msg += f"<b>–û—Ü–µ–Ω–∫–∞ (Score):</b> {new_score}\n\n"
    result_msg += f"<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (Feedback):</b>\n{feedback_text}"

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å")],
            [KeyboardButton(text="‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(result_msg, parse_mode="HTML", reply_markup=kb)
    await state.update_data(last_question=question, last_grade=grade)

@router.message(TaskState.waiting_for_voice)
async def process_voice_message(message: Message, state: FSMContext):
    text = message.text.strip() if message.text else ""

    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        logging.info("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        user = await get_user_from_db(message.from_user.id)
        if user:
            profile_text = (
                f"<b>üë§ –ò–º—è:</b> {user['name']}\n"
                f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {user['age']}\n"
                f"<b>üéØ –£—Ä–æ–≤–µ–Ω—å:</b> {user['level']}\n"
                f"<b>‚≠ê –ë–∞–ª–ª—ã:</b> {user['points']}\n\n"
                "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:"
            )
        else:
            profile_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        await message.answer(profile_text, parse_mode="HTML", reply_markup=get_main_menu())
        await state.clear()
        return

    # --- –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ---
    if text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å":
        logging.info("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å' –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        data = await state.get_data()
        grade = data.get("grade")
        topic = data.get("selected_topic")
        if not grade or not topic:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=get_main_menu())
            return
        user = await get_user_from_db(message.from_user.id)
        if not user:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
            return
        name = user["name"]
        new_question = await generate_question(grade, topic, name)
        await state.set_state(TaskState.waiting_for_answer)
        await state.update_data(question=new_question, last_score=0)

        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º"), KeyboardButton(text="üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º")],
                [KeyboardButton(text="‚ùì –£—Ç–æ—á–Ω–∏—Ç—å"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —É—Ä–æ–≤–Ω—è {grade} –ø–æ —Ç–µ–º–µ ¬´{topic}¬ª:\n\n{new_question}", reply_markup=kb)
        return

    # --- –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ---
    if text == "‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç":
        logging.info("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç' –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        data = await state.get_data()
        last_question = data.get("last_question")
        last_grade = data.get("last_grade")

        if not last_question or not last_grade:
            await message.answer(
                "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.",
                reply_markup=get_main_menu()
            )
            await state.clear()
            return

        correct_answer = await generate_correct_answer(last_question, last_grade)
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å")],
                [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(f"‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —É—Ä–æ–≤–Ω—è {last_grade}:\n\n{correct_answer}", parse_mode="HTML", reply_markup=kb)
        return

    # --- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å ---
    if not message.voice:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ---
    voice = message.voice
    file = await bot.get_file(voice.file_id)
    file_path = file.file_path
    file_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"
    save_path = f"temp_{message.from_user.id}.ogg"

    import aiohttp
    async with aiohttp.ClientSession() as session:
        async with session.get(file_url) as resp:
            with open(save_path, "wb") as f:
                f.write(await resp.read())

    text = await transcribe_audio(save_path)
    os.remove(save_path)
    await message.answer(f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: ¬´{text}¬ª\n–û—Ü–µ–Ω–∏–≤–∞—é...")

    # --- –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
    data = await state.get_data()
    question = data.get("question")
    grade = data.get("grade")
    last_score = data.get("last_score", 0.0)
    user = await get_user_from_db(message.from_user.id)

    if not user or not grade or not question:
        await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")
        return

    feedback_raw = await evaluate_answer(question, text, user["name"])
    logging.info(f"[DEBUG] RAW FEEDBACK (voice):\n{feedback_raw}")

    if not feedback_raw or "–û—à–∏–±–∫–∞" in feedback_raw:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=get_main_menu()
        )
        await state.clear()
        return

    import re
    pattern = r"–ö—Ä–∏—Ç–µ—Ä–∏–∏:\s*(.*?)Score:\s*([\d.]+)\s*Feedback:\s*(.*)"
    match = re.search(pattern, feedback_raw, re.DOTALL)
    if match:
        criteria_block = match.group(1).strip()
        try:
            new_score = float(match.group(2))
        except ValueError:
            new_score = 0.0
        feedback_text = match.group(3).strip()
    else:
        criteria_block = ""
        new_score = 0.0
        feedback_text = feedback_raw.strip()

    if new_score > last_score:
        await update_user_points(message.from_user.id, new_score - last_score)
        await update_level(message.from_user.id)
        await state.update_data(last_score=new_score)

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
    result_msg = ""
    if criteria_block:
        result_msg += f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–∏:</b>\n{criteria_block}\n\n"
    result_msg += f"<b>–û—Ü–µ–Ω–∫–∞ (Score):</b> {new_score}\n\n"
    result_msg += f"<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (Feedback):</b>\n{feedback_text}"

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å")],
            [KeyboardButton(text="‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(result_msg, parse_mode="HTML", reply_markup=kb)
    await state.update_data(last_question=question, last_grade=grade)

# --------------------------
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π callback –¥–ª—è "next_question"
# --------------------------

@router.callback_query(F.data == "next_question")
async def next_question_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–µ–π–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=get_grades_menu())
    await callback.answer()

# --------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI
# --------------------------

async def generate_question(grade: str, topic: str, name: str) -> str:
    prompt = (
        f"–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –ø–æ –Ω–∞–π–º—É –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. "
        f"–ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –ó–∞–¥–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, –∂–∏–≤–æ–π –∫–µ–π—Å–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∫–∞–Ω–¥–∏–¥–∞—Ç—É —É—Ä–æ–≤–Ω—è {grade} –ø–æ —Ç–µ–º–µ ¬´{topic}¬ª. "
        f"–û–±—Ä–∞—â–∞–π—Å—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –ø–æ –∏–º–µ–Ω–∏ {name}. –ú–∞–∫—Å–∏–º—É–º 800 —Å–∏–º–≤–æ–ª–æ–≤. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª * (–∑–≤—ë–∑–¥–æ—á–∫—É)."
    )
    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏ –∂–∏–≤—ã–µ –∫–µ–π—Å-–≤–æ–ø—Ä–æ—Å—ã. –ù–µ –ø–∏—à–∏ —à–∞–±–ª–æ–Ω–Ω–æ –∏ –Ω–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=300,
            temperature=0.7
        )
        question_text = response.choices[0].message.content.strip()
        return question_text[:797] + "..." if len(question_text) > 800 else question_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞."

async def evaluate_answer(question: str, student_answer: str, student_name: str) -> str:
    prompt = (
        f"–í–æ–ø—Ä–æ—Å: {question}\n"
        f"–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_answer}\n\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ 5 –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n"
        "1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–ø—Ä–æ—Å—É\n"
        "2. –ü–æ–ª–Ω–æ—Ç–∞\n"
        "3. –ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è\n"
        "4. –°—Ç—Ä—É–∫—Ç—É—Ä–∞\n"
        "5. –ü—Ä–∏–º–µ—Ä—ã\n\n"
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ, ‚ö†Ô∏è –∏–ª–∏ ‚ùå.\n"
        "–û–ø—Ä–µ–¥–µ–ª–∏ –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É (Score) –æ—Ç 0.0 –¥–æ 1.0.\n"
        "–í—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ö—Ä–∏—Ç–µ—Ä–∏–∏:\n"
        "üîπ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–ø—Ä–æ—Å—É: <—ç–º–æ–¥–∂–∏>\n"
        "üîπ –ü–æ–ª–Ω–æ—Ç–∞: <—ç–º–æ–¥–∂–∏>\n"
        "üîπ –ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è: <—ç–º–æ–¥–∂–∏>\n"
        "üîπ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: <—ç–º–æ–¥–∂–∏>\n"
        "üîπ –ü—Ä–∏–º–µ—Ä—ã: <—ç–º–æ–¥–∂–∏>\n\n"
        "Score: <—á–∏—Å–ª–æ>\n"
        "Feedback: –í–∞—à –æ—Ç–≤–µ—Ç... (–æ–±—Ä–∞—Ç–∏—Å—å –∫ —Å—Ç—É–¥–µ–Ω—Ç—É –Ω–∞ ¬´–í—ã¬ª, –Ω–æ –Ω–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è)"
    )
    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —Å—Ç—Ä–æ–≥–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è, —Å—Ä–∞–∑—É –¥–∞–≤–∞–π –æ—Ü–µ–Ω–∫—É –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=450,
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞."

async def generate_correct_answer(question: str, grade: str) -> str:
    prompt = (
        f"–ü—Ä–∏–≤–µ–¥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è {grade} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n\n"
        f"{question}\n\n"
        "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–µ–ª—É, –±–µ–∑ –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏–ª–∏ –ª–∏—à–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π. –î–∞–π —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –±–µ–∑ –æ—Ü–µ–Ω–æ–∫, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
                },
                {"role": "user", "content": prompt}
            ],
            max_tokens=1000,
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."

async def transcribe_audio(file_path: str) -> str:
    with open(file_path, "rb") as audio_file:
        response = await asyncio.to_thread(
            client.audio.transcriptions.create,
            model="whisper-1",
            file=audio_file
            language="ru"
        )
    return response.text

# --------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# --------------------------

async def on_startup():
    await create_db_pool()
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(on_startup())
