import os
import re
import logging
import asyncpg
import asyncio
from urllib.parse import urlparse

from dotenv import load_dotenv
load_dotenv()

from openai import OpenAI

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from inactivity_middleware import InactivityMiddleware

# --------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# --------------------------

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_IDS = os.getenv("ADMIN_IDS", "")
admin_ids = [int(x.strip()) for x in ADMIN_IDS.split(",")] if ADMIN_IDS else []

# --------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# --------------------------

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)
# –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (15 –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è)
dp.message.middleware(InactivityMiddleware(timeout_seconds=900))
dp.callback_query.middleware(InactivityMiddleware(timeout_seconds=900))

# --------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------

client = OpenAI(api_key=OPENAI_API_KEY)
logging.basicConfig(level=logging.INFO)

# --------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# --------------------------

LEVELS = ["Junior", "Middle", "Senior", "Head of Product", "CPO", "CEO"]

welcome_text = (
    "üí° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ \"One to One Booster bot\" ‚Äî –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ!"
)

TOPICS = [
    "–ì–∏–ø–æ—Ç–µ–∑—ã",
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "–ú–µ—Ç—Ä–∏–∫–∏",
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π",
    "Soft skills",
    "–°—Ç—Ä–∞—Ç–µ–≥–∏—è",
    "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–¥—É–∫—Ç—É"
]

# --------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é
# --------------------------

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="task")],
        [InlineKeyboardButton(text="üìù –≠–∫–∑–∞–º–µ–Ω", callback_data="exam")],
        [InlineKeyboardButton(text="üë®‚Äçüéì –£—á–µ–Ω–∏–∫–∞–º –ê–∫–∞–¥–µ–º–∏–∏", callback_data="learning")],
        [InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news")],
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data="progress")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_grades_menu():
    keyboard = [
        [InlineKeyboardButton(text="üë∂ Junior", callback_data="grade_Junior")],
        [InlineKeyboardButton(text="üßë Middle", callback_data="grade_Middle")],
        [InlineKeyboardButton(text="üë®‚Äçüíº Senior", callback_data="grade_Senior")],
        [InlineKeyboardButton(text="üíº Head of Product", callback_data="grade_Head of Product")],
        [InlineKeyboardButton(text="üìä CPO", callback_data="grade_CPO")],
        [InlineKeyboardButton(text="üöÄ CEO", callback_data="grade_CEO")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_topics_menu():
    buttons = []
    for topic in TOPICS:
        buttons.append([InlineKeyboardButton(text=topic, callback_data=f"topic_{topic}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choose_grade")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_exam_menu():
    keyboard = [[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_news_menu():
    keyboard = [[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_admin_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞", callback_data="admin_metrics")],
        [InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# -------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è
# --------------------------

class RegisterState(StatesGroup):
    name = State()
    age = State()

class TaskState(StatesGroup):
    waiting_for_answer = State()
    waiting_for_clarification = State()
    waiting_for_voice = State()  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
# --------------------------
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
# --------------------------

db_pool = None

async def create_db_pool():
    global db_pool
    url = os.getenv("DATABASE_URL")
    parsed = urlparse(url)
    db_pool = await asyncpg.create_pool(
        user=parsed.username,
        password=parsed.password,
        database=parsed.path.lstrip("/"),
        host=parsed.hostname,
        port=parsed.port or 5432
    )
    async with db_pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY,
                username TEXT,
                name TEXT,
                age INTEGER,
                level TEXT,
                points REAL
            )
        ''')

                # üëá –¢–∞–±–ª–∏—Ü–∞ answers
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS answers (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                question TEXT,
                answer TEXT,
                grade TEXT,
                topic TEXT,
                score REAL,
                is_suspicious BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT now()
            )
        ''')

        # üëá –¢–∞–±–ª–∏—Ü–∞ analytics
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS analytics (
                user_id BIGINT PRIMARY KEY,
                tasks_done INTEGER,
                average_score REAL,
                criteria_relevance REAL,
                criteria_completeness REAL,
                criteria_argumentation REAL,
                criteria_structure REAL,
                criteria_examples REAL,
                percentile INTEGER,
                next_target INTEGER
            )
        ''')

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_suspicious
        await conn.execute('''
            DO $$
            BEGIN
                IF NOT EXISTS (
                    SELECT 1 FROM information_schema.columns 
                    WHERE table_name='answers' AND column_name='is_suspicious'
                ) THEN
                    ALTER TABLE answers ADD COLUMN is_suspicious BOOLEAN DEFAULT FALSE;
                END IF;
            END
            $$;
        ''')


# --------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# --------------------------

async def add_user_to_db(user_id: int, username: str, name: str, age: int):
    async with db_pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO users (id, username, name, age, level, points)
            VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (id) DO NOTHING
        ''', user_id, username, name, age, "Junior", 0.0)

async def get_user_from_db(user_id: int):
    async with db_pool.acquire() as conn:
        return await conn.fetchrow('SELECT * FROM users WHERE id = $1', user_id)

async def update_user_points(user_id: int, additional_points: float):
    async with db_pool.acquire() as conn:
        await conn.execute(
            'UPDATE users SET points = points + $1 WHERE id = $2',
            additional_points, user_id
        )

import time

async def save_user_answer(user_id: int, question: str, answer: str, grade: str, topic: str, score: float, state: FSMContext = None):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSMContext, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    state_data = await state.get_data() if state else {}
    question_time = state_data.get("question_time", time.time())

    # –£—Å–ª–æ–≤–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    is_suspicious = len(answer.strip()) < 30 or (time.time() - question_time) < 120

    async with db_pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO answers (user_id, question, answer, grade, topic, score, is_suspicious)
            VALUES ($1, $2, $3, $4, $5, $6, $7)
        ''', user_id, question, answer, grade, topic, score, is_suspicious)

async def update_level(user_id: int):
    user = await get_user_from_db(user_id)
    if not user:
        return
    current_level = user["level"]
    points = user["points"]
    cur_index = LEVELS.index(current_level)
    required_points = 50 * (cur_index + 1)
    if points >= required_points and cur_index < len(LEVELS) - 1:
        new_level = LEVELS[cur_index + 1]
        async with db_pool.acquire() as conn:
            await conn.execute(
                'UPDATE users SET level = $1 WHERE id = $2',
                new_level, user_id
            )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—à–µ–Ω —Å {current_level} –¥–æ {new_level}.")

async def get_user_rank(user_id: int) -> int:
    async with db_pool.acquire() as conn:
        rows = await conn.fetch('''
            SELECT id
            FROM users
            ORDER BY points DESC
        ''')
        ids = [row['id'] for row in rows]
        if user_id in ids:
            return ids.index(user_id) + 1  # –ø–æ–∑–∏—Ü–∏—è +1, —Ç.–∫. —Å –Ω—É–ª—è
        return -1  # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞—à–ª–∏

# --------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
# --------------------------

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    user = await get_user_from_db(callback.from_user.id)
    if user:
        name = user["name"]
        age = user["age"]
        level = user["level"]
        points = user["points"]
        rank = await get_user_rank(callback.from_user.id)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ç–≤–µ—Ç–∞
        async with db_pool.acquire() as conn:
            rows = await conn.fetch('''
                SELECT topic, grade, score
                FROM answers
                WHERE user_id = $1
                ORDER BY created_at DESC
                LIMIT 3
            ''', callback.from_user.id)

        history_lines = "\n".join([
            f"‚Ä¢ {r['topic']} ({r['grade']}) ‚Äî {round(r['score'], 2)}" for r in rows
        ]) if rows else "‚Äî –ø–æ–∫–∞ –Ω–µ—Ç"

        text = (
            f"<b>üë§ –ò–º—è:</b> {name}\n"
            f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
            f"<b>üéØ –£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
            f"<b>‚≠ê –ë–∞–ª–ª—ã:</b> {round(points, 2)}\n\n"
            f"<b>üèÜ –†–µ–π—Ç–∏–Ω–≥:</b> {rank}-–µ –º–µ—Å—Ç–æ\n\n"
            f"<b>üïò –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã:</b>\n{history_lines}"
        )

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_main_menu())
    else:
        await callback.message.edit_text(welcome_text, reply_markup=get_main_menu())

    await callback.answer()

@router.callback_query(F.data == "start_answering")
async def start_answering(callback: CallbackQuery):
    await callback.message.answer(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await callback.answer()

@router.message(lambda msg: msg.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...", reply_markup=ReplyKeyboardRemove())

    user = await get_user_from_db(message.from_user.id)

    if user:
        name = user["name"]
        level = user["level"]
        points = round(user["points"], 2)

        welcome_text = (
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!\n"
            f"üéì –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"‚≠ê –ë–∞–ª–ª—ã: {points}\n\n"
            "–ì–æ—Ç–æ–≤ –ø—Ä–æ–∫–∞—á–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?"
        )

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üöÄ –ì–æ—Ç–æ–≤, –ø–æ–≥–Ω–∞–ª–∏!")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(welcome_text, reply_markup=keyboard)
    else:
        await message.answer_photo(
            photo="https://i.imgur.com/zIPzQKF.jpeg",
            caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ One to One IT Academy!"
        )
        await message.answer("üëã –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(RegisterState.name)

@router.message(lambda msg: msg.text == "üöÄ –ì–æ—Ç–æ–≤, –ø–æ–≥–Ω–∞–ª–∏!")
async def start_from_welcome(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üöÄ –û—Ç–ª–∏—á–Ω–æ, –ø–æ–≥–Ω–∞–ª–∏!", reply_markup=ReplyKeyboardRemove())
    await message.answer("üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())

# –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
@router.message(lambda msg: msg.text == "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
async def start_training(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(bot_messages=[])
    user = await get_user_from_db(message.from_user.id)
    if user:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.", reply_markup=get_main_menu())
    else:
        await message.answer_photo(
            photo="https://i.imgur.com/zIPzQKF.jpeg",
            caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ One to One IT Academy!"
        )
        await message.answer("üëã –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(RegisterState.name)

@router.message(RegisterState.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegisterState.age)

@router.message(RegisterState.age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    data = await state.get_data()
    name = data.get("name")
    await add_user_to_db(message.from_user.id, message.from_user.username or "", name, int(message.text))
    await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_menu())
    await state.clear()

@router.message(lambda msg: msg.text == "/ping")
async def cmd_ping(message: Message):
    await message.answer("üèì Pong!")

# --------------------------
# –ê–¥–º–∏–Ω–∫–∞
# --------------------------

@router.message(lambda message: message.text == "/admin")
async def admin_panel(message: Message, state: FSMContext):
    if message.from_user.id not in admin_ids:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await message.answer("üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=get_admin_menu())

@router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery):
    try:
        async with db_pool.acquire() as conn:
            row = await conn.fetchrow("SELECT COUNT(*) FROM users")
            count = row[0]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        count = "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}"
    await callback.message.edit_text(text, reply_markup=get_admin_menu())
    await callback.answer()

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=get_admin_menu())
    await callback.answer()

@router.callback_query(F.data == "admin_metrics")
async def admin_metrics_handler(callback: CallbackQuery):
    try:
        async with db_pool.acquire() as conn:
            # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tasks_avg = await conn.fetchval('''
                SELECT AVG(cnt) FROM (
                    SELECT COUNT(*) AS cnt FROM answers GROUP BY user_id
                ) sub
            ''')

            # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
            avg_score = await conn.fetchval("SELECT AVG(score) FROM answers")

            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã
            top_topics = await conn.fetch('''
                SELECT topic, COUNT(*) as count
                FROM answers
                GROUP BY topic
                ORDER BY count DESC
                LIMIT 3
            ''')

            top_lines = "\n".join([
                f"{i+1}. {r['topic']} ‚Äî {r['count']} –æ—Ç–≤–µ—Ç–æ–≤" for i, r in enumerate(top_topics)
            ])

            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
            avg_time = "‚Äî —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ"

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            text = (
                "<b>üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                f"üßÆ –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {round(tasks_avg or 0, 2)}\n"
                f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏—è: {round(avg_score or 0, 2)}\n"
                f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –±–æ—Ç–µ: {avg_time}\n\n"
                f"<b>üî• –¢–æ–ø-3 —Ç–µ–º—ã –∑–∞–¥–∞–Ω–∏–π:</b>\n{top_lines}\n\n"
                "<i>–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</i>"
            )

            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_admin_menu())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫.", reply_markup=get_admin_menu())

    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    user = await get_user_from_db(callback.from_user.id)
    if user:
        name = user["name"]
        age = user["age"]
        level = user["level"]
        points = user["points"]
        text = (
            f"<b>üë§ –ò–º—è:</b> {name}\n"
            f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
            f"<b>üéØ –£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
            f"<b>‚≠ê –ë–∞–ª–ª—ã:</b> {round(user['points'], 2)}\n\n"
        )
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_main_menu())
    else:
        await callback.message.edit_text(welcome_text, reply_markup=get_main_menu())
    await callback.answer()

@router.callback_query(F.data == "learning")
async def learning_entry(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –° 0 –¥–æ Junior/Middle", callback_data="track_junior_middle")],
        [InlineKeyboardButton(text="üß† Senior", callback_data="track_senior")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await callback.message.edit_text(
        "üéì <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è:</b>",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data == "track_junior_middle")
async def handle_junior_track(callback: CallbackQuery):
    await callback.message.edit_text(
        "üöÄ –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±—É—á–µ–Ω–∏–µ —Å 0 –¥–æ Junior/Middle. –ó–¥–µ—Å—å —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –∑–∞–¥–∞–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "track_senior")
async def handle_senior_track(callback: CallbackQuery):
    await callback.message.edit_text(
        "üß† –í—ã –≤—ã–±—Ä–∞–ª–∏ Senior-—Ç—Ä–µ–∫. –ó–¥–µ—Å—å —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –∑–∞–¥–∞–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "news")
async def news_callback(callback: CallbackQuery):
    text = (
        "<b>üìå –ß—Ç–æ —É–∂–µ —É–º–µ–µ—Ç –Ω–∞—à –±–æ—Ç:</b>\n\n"
        "1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –ø–æ —É—Ä–æ–≤–Ω—è–º –∏ —Ç–µ–º–∞–º\n"
        "2Ô∏è‚É£ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–º üéôÔ∏è\n"
        "3Ô∏è‚É£ –î–∞—ë—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ 5 –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
        "4Ô∏è‚É£ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ\n"
        "5Ô∏è‚É£ –£—á–∏—Ç —É—Ç–æ—á–Ω—è—Ç—å –≤–æ–ø—Ä–æ—Å, –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤—å—é\n"
        "6Ô∏è‚É£ –ù–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–ª—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å üß†\n"
        "7Ô∏è‚É£ –£–¥–æ–±–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ‚Äî –≤—Å—ë –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ üëå\n\n"
        
        "<b>üß™ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</b>\n\n"
        "üîÑ –ò—Å—Ç–æ—Ä–∏—è —Ç–≤–æ–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å\n"
        "üìä –†–∞–∑–¥–µ–ª ¬´–ü—Ä–æ–≥—Ä–µ—Å—Å¬ª: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π —Ä–æ—Å—Ç –æ—Ç Junior –¥–æ CEO\n"
        "üèÜ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: –±–µ–π–¥–∂–∏, —É—Ä–æ–≤–Ω–∏, —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–µ–π—Å–æ–≤ –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π\n"
        "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –æ–±—É—á–µ–Ω–∏—è\n"
        "ü§ñ AI-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä ‚Äî –∫–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏\n"
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_news_menu())
    await callback.answer()

@router.callback_query(F.data == "exam")
async def exam_callback(callback: CallbackQuery):
    text = (
        "üìù –†–∞–∑–¥–µ–ª –≠–∫–∑–∞–º–µ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_exam_menu())
    await callback.answer()

@router.callback_query(F.data == "progress")
async def show_progress_analytics(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = await get_user_from_db(user_id)
    if not user:
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    data = await get_or_generate_analytics(user_id)
    text = format_progress_analytics(user, data)
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_main_menu())
    await callback.answer()

# --------------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: –≤—ã–±–æ—Ä –≥—Ä–µ–π–¥–∞ –∏ —Ç–µ–º—ã
# --------------------------

@router.callback_query(F.data == "task")
async def task_callback(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–µ–π–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=get_grades_menu())
    await callback.answer()

@router.callback_query(F.data == "choose_grade")
async def back_to_grades(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–µ–π–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=get_grades_menu())
    await callback.answer()

@router.callback_query(F.data.startswith("grade_"))
async def handle_grade_selection(callback: CallbackQuery, state: FSMContext):
    selected_grade = callback.data.replace("grade_", "").strip()
    user = await get_user_from_db(callback.from_user.id)
    if not user:
        await callback.message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", reply_markup=get_main_menu())
        await callback.answer()
        return
    current_level = user["level"]
    if selected_grade != current_level:
        await callback.message.answer(
            f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}.",
            reply_markup=get_main_menu()
        )
        await callback.answer()
        return
    await state.update_data(selected_grade=selected_grade)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:", reply_markup=get_topics_menu())
    await callback.answer()

@router.callback_query(F.data.startswith("topic_"))
async def handle_topic_selection(callback: CallbackQuery, state: FSMContext):
    chosen_topic = callback.data.replace("topic_", "").strip()
    data = await state.get_data()
    selected_grade = data.get("selected_grade")
    user = await get_user_from_db(callback.from_user.id)

    if not selected_grade or not user:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≥—Ä–µ–π–¥ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=get_grades_menu())
        await callback.answer()
        return

    question = await generate_question(selected_grade, chosen_topic, user["name"])
    if not question or "–û—à–∏–±–∫–∞" in question:
        await callback.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
            reply_markup=get_main_menu()
        )
        await state.clear()
        await callback.answer()
        return

    await state.set_state(TaskState.waiting_for_answer)
    await state.update_data(question=question, grade=selected_grade, selected_topic=chosen_topic, last_score=0.0)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º"), KeyboardButton(text="üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º")],
            [KeyboardButton(text="‚ùì –£—Ç–æ—á–Ω–∏—Ç—å –ø–æ –≤–æ–ø—Ä–æ—Å—É")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer(
        f"üí¨ –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è {selected_grade} –ø–æ —Ç–µ–º–µ ¬´{chosen_topic}¬ª:\n\n{question}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data=="nav_show")
async def cb_show(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    q, g = data.get("last_question"), data.get("last_grade")
    if not q or not g:
        return await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)
    correct = await generate_correct_answer(q, g)
    kb = InlineKeyboardMarkup(inline_keyboard=[
       [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="nav_next")],
       [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav_main")]
    ])

    await call.message.edit_text(f"‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n{correct}", parse_mode="HTML", reply_markup=kb)
    await call.answer()

@router.callback_query(F.data=="nav_next")
async def cb_next(call: CallbackQuery, state: FSMContext):
    data  = await state.get_data()
    grade = data.get("grade"); topic=data.get("selected_topic")
    user  = await get_user_from_db(call.from_user.id)
    if not grade or not topic or not user:
        return await call.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞", show_alert=True)
    new_q = await generate_question(grade, topic, user["name"])
    await state.update_data(
    question=new_q,
    last_score=0.0,
    grade=grade,
    selected_topic=topic
)
    kb = InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º", callback_data="start_answer")],
      [InlineKeyboardButton(text="üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º", callback_data="start_voice")],
      [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav_main")],
    ])

    await call.message.edit_text(f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n\n{new_q}", reply_markup=kb)
    await call.answer()

@router.callback_query(F.data=="nav_main")
async def cb_main(call: CallbackQuery, state: FSMContext):
    await state.clear()
    user = await get_user_from_db(call.from_user.id)
    text = welcome_text if not user else (
        f"<b>üë§ {user['name']}</b>\nüéØ {user['level']} | ‚≠ê {round(user['points'],2)}"
    )
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=get_main_menu())
    await call.answer()

@router.callback_query(F.data == "start_answer")
async def handle_start_answer_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –æ—Ç–≤–µ—Ç.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(TaskState.waiting_for_answer)
    await callback.answer()

# --------------------------
# –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏
# --------------------------

@router.callback_query(F.data == "clarify_info")
async def clarify_info_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TaskState.waiting_for_clarification)
    await callback.message.answer(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –∑–∞–¥–∞–Ω–∏—é:",
        reply_markup=ReplyKeyboardRemove()
    )
    await callback.answer()

@router.message(TaskState.waiting_for_clarification)
async def process_clarification(message: Message, state: FSMContext):
    data = await state.get_data()
    question = data.get("question")
    user = await get_user_from_db(message.from_user.id)
    name = user["name"] if user else "–∫–∞–Ω–¥–∏–¥–∞—Ç"

    if not question:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.")
        await state.clear()
        return

    clarification_prompt = (
        f"–í–æ–ø—Ä–æ—Å: {question}\n"
        f"–£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {name}:\n{message.text.strip()}\n\n"
        "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —á–∞—Ç –º–µ–∂–¥—É –∫–æ–ª–ª–µ–≥–∞–º–∏. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω ‚Äî –º—è–≥–∫–æ —É—Ç–æ—á–Ω–∏. –ï—Å–ª–∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏–º–µ—Ä ‚Äî –ø—Ä–∏–≤–µ–¥–∏. "
        "–ï—Å–ª–∏ –ø—É—Ç–∞–µ—Ç—Å—è ‚Äî –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–¥–∞–Ω–∏–µ. –ë–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, —Å—Ä–∞–∑—É –∫ —Å—É—Ç–∏."
    )

    try:
        clarification_response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π. –ù–µ —Ä–µ—à–∞–π –∑–∞–¥–∞—á—É –∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ –≤ —á–∞—Ç–µ: –ø–æ–º–æ–≥–∏ –ø–æ–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ, —Ä–∞–∑—ä—è—Å–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É, –Ω–æ –Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–π –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç. –ë–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –∑–∞–ø—É—Ç–∞–ª—Å—è ‚Äî –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–¥–∞–Ω–∏–µ. –ï—Å–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –Ω–µ –ø–æ –¥–µ–ª—É ‚Äî –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤—å –æ–±—Ä–∞—Ç–Ω–æ –∫ —Å—É—Ç–∏."
                        "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ –≤ Slack –∏–ª–∏ Telegram: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏. "
                        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤—å. "
                        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Ç–∞–ª—Å—è ‚Äî –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–¥–∞–Ω–∏–µ. "
                        "–ë—É–¥—å –ø—Ä–æ—Å—Ç—ã–º, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º. –ë–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, –ø–µ—Ä–µ—Ö–æ–¥–∏ —Å—Ä–∞–∑—É –∫ —Å—É—Ç–∏."
                    )
                },
                {"role": "user", "content": clarification_prompt}
            ],
            max_tokens=200,
            temperature=0.5
        )
        reply = clarification_response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏: {e}")
        reply = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    reply_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º"), KeyboardButton(text="üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        f"üìé –£—Ç–æ—á–Ω–µ–Ω–∏–µ:\n{reply}\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=reply_keyboard
    )
    await state.set_state(TaskState.waiting_for_answer)

@router.message(
    TaskState.waiting_for_answer,
    lambda m: m.text in ["‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", "‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
)
async def handle_answer_navigation(message: Message, state: FSMContext):
    ...

    text = message.text
    data = await state.get_data()
    user = await get_user_from_db(message.from_user.id)

    # 1) –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        return await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

    # 2) –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if text == "‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç":
        last_q = data.get("last_question"); last_g = data.get("last_grade")
        if not last_q or not last_g:
            await state.clear()
            return await message.answer("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.", reply_markup=get_main_menu())
        correct = await generate_correct_answer(last_q, last_g)
        kb = ReplyKeyboardMarkup([[KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å")],
                                  [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                                  resize_keyboard=True, one_time_keyboard=True)
        return await message.answer(f"‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —É—Ä–æ–≤–Ω—è {last_g}:\n\n{correct}",
                                    parse_mode="HTML", reply_markup=kb)

    # 3) –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    if text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å":
        grade = data.get("grade"); topic = data.get("selected_topic")
        if not grade or not topic or not user:
            return await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=get_main_menu())
        new_q = await generate_question(grade, topic, user["name"])
        await state.update_data(question=new_q, last_score=0.0)
        await state.set_state(TaskState.waiting_for_answer)
        kb = ReplyKeyboardMarkup([
                [KeyboardButton("‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º"), KeyboardButton("üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º")],
                [KeyboardButton("‚ùì –£—Ç–æ—á–Ω–∏—Ç—å"), KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ], resize_keyboard=True, one_time_keyboard=True)
        return await message.answer(f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —É—Ä–æ–≤–Ω—è {grade} –ø–æ —Ç–µ–º–µ ¬´{topic}¬ª:\n\n{new_q}",
                                    reply_markup=kb)

    
# --------------------------
# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è TaskState.waiting_for_answer
# --------------------------

@router.message(
    TaskState.waiting_for_answer,
    lambda m: m.text not in ["‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", "‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
)
async def handle_task_answer(message: Message, state: FSMContext):
    text = message.text.strip()
    
    if text in ["‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", "‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        return
    current_state = await state.get_state()
    if current_state != TaskState.waiting_for_answer.state:
        await message.answer(
            "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Ç–µ–º—É.",
            reply_markup=get_main_menu()
        )
        await state.clear()
        return

    text = message.text.strip()
    logging.info(f"[DEBUG] Received text: {repr(text)}")
    data = await state.get_data()

    if text == "‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å":
        await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –æ—Ç–≤–µ—Ç.", reply_markup=types.ReplyKeyboardRemove())
        return

    if text == "‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º":
        logging.info("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º'")
        await state.set_state(TaskState.waiting_for_answer)
        await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –æ—Ç–≤–µ—Ç.", reply_markup=types.ReplyKeyboardRemove())
        return

    if text == "üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º":
        logging.info("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª 'üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º'")
        await state.set_state(TaskState.waiting_for_voice)
        await message.answer("üé§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –æ—Ç–≤–µ—Ç–æ–º.", reply_markup=types.ReplyKeyboardRemove())
        return

    if text in ["‚ùì –£—Ç–æ—á–Ω–∏—Ç—å", "‚ùì –£—Ç–æ—á–Ω–∏—Ç—å –ø–æ –≤–æ–ø—Ä–æ—Å—É"]:
        logging.info("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '‚ùì –£—Ç–æ—á–Ω–∏—Ç—å'")
        await state.set_state(TaskState.waiting_for_clarification)
        await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –∑–∞–¥–∞–Ω–∏—é:", reply_markup=types.ReplyKeyboardRemove())
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    grade = data.get("grade")
    question = data.get("question")
    last_score = data.get("last_score", 0.0)
    if not grade or not question:
        await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user = await get_user_from_db(message.from_user.id)
    if not user:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ GPT-—à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    if detect_gpt_phrases(text):
        await message.answer(
            "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã. "
            "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É."
        )
        return

    # –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞
    student_name = user["name"]
    logging.info(f"[DEBUG] –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {repr(question)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {student_name}")
    feedback_raw = await evaluate_answer(question, text, student_name)
    logging.info(f"[DEBUG] RAW FEEDBACK:\n{feedback_raw}")

    if not feedback_raw or "–û—à–∏–±–∫–∞" in feedback_raw:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu()
        )
        await state.clear()
        return

    import re
    pattern = r"–ö—Ä–∏—Ç–µ—Ä–∏–∏:\s*(.*?)–ò—Ç–æ–≥:\s*([\d.]+)\s*Feedback:\s*(.*)"
    match = re.search(pattern, feedback_raw, re.DOTALL)

    if match:
        criteria_block = match.group(1).strip()
        try:
            new_score = float(match.group(2))
        except ValueError:
            new_score = 0.0
        feedback_text = match.group(3).strip()
    else:
        criteria_block = ""
        new_score = 0.0
        feedback_text = feedback_raw.strip()

    # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç
    result_msg = ""
    if criteria_block:
        result_msg += f"<b>üìä –ö—Ä–∏—Ç–µ—Ä–∏–∏:</b>\n{criteria_block}\n\n"
    result_msg += f"<b>üßÆ –û—Ü–µ–Ω–∫–∞ (Score):</b> <code>{round(new_score, 2)}</code>\n\n"
    result_msg += f"<b>üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (Feedback):</b>\n{feedback_text}"

    inline_nav = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="nav_next")],
    [InlineKeyboardButton(text="‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", callback_data="nav_show")],
    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav_main")],
])
    await message.answer(result_msg, parse_mode="HTML", reply_markup=inline_nav)
    await state.update_data(last_question=question, last_grade=grade)
    await state.set_state(TaskState.waiting_for_answer)


@router.message(TaskState.waiting_for_voice)
async def process_voice_message(message: Message, state: FSMContext):
    text = message.text.strip() if message.text else ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not message.voice:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    voice = message.voice
    file = await bot.get_file(voice.file_id)
    file_path = file.file_path
    file_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"
    save_path = f"temp_{message.from_user.id}.ogg"

    import aiohttp
    async with aiohttp.ClientSession() as session:
        async with session.get(file_url) as resp:
            with open(save_path, "wb") as f:
                f.write(await resp.read())

    text = await transcribe_audio(save_path)
    os.remove(save_path)
    await message.answer(f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: ¬´{text}¬ª\n–û—Ü–µ–Ω–∏–≤–∞—é...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —à–∞–±–ª–æ–Ω–Ω—ã–µ GPT-—Ñ—Ä–∞–∑—ã (–ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏)
    if detect_gpt_phrases(text):
        await message.answer(
        "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–±–ª–æ–Ω–Ω—ã–µ GPT-—Ñ—Ä–∞–∑—ã. "
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∏ —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É.",
        reply_markup=get_main_menu()
    )
        await state.clear()
        return

    # –û—Ü–µ–Ω–∫–∞
    data = await state.get_data()
    question = data.get("question")
    grade = data.get("grade")
    last_score = data.get("last_score", 0.0)
    user = await get_user_from_db(message.from_user.id)

    if not user or not grade or not question:
        await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")
        return

    feedback_raw = await evaluate_answer(question, text, user["name"])
    logging.info(f"[DEBUG] RAW FEEDBACK (voice):\n{feedback_raw}")

    if not feedback_raw or "–û—à–∏–±–∫–∞" in feedback_raw:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_menu())
        await state.clear()
        return

    pattern = r"–ö—Ä–∏—Ç–µ—Ä–∏–∏:\s*(.*?)–ò—Ç–æ–≥:\s*([\d.]+)\s*Feedback:\s*(.*)"
    match = re.search(pattern, feedback_raw, re.DOTALL)
    if match:
        criteria_block = match.group(1).strip()
        try:
            new_score = float(match.group(2))
        except ValueError:
            new_score = 0.0
        feedback_text = match.group(3).strip()
    else:
        criteria_block = ""
        new_score = 0.0
        feedback_text = feedback_raw.strip()

    if new_score > last_score:
        await update_user_points(message.from_user.id, new_score - last_score)
        await update_level(message.from_user.id)
        await save_user_answer(
          user_id=message.from_user.id,
          question=question,
          answer=text,
          grade=grade,
          topic=data.get("selected_topic", "‚Äî"),
          score=new_score,
          state=state
        )
        await state.update_data(last_score=new_score)

    result_msg = ""
    if criteria_block:
        result_msg += f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–∏:</b>\n{criteria_block}\n\n"
    result_msg += f"<b>–û—Ü–µ–Ω–∫–∞ (Score):</b> {new_score}\n\n"
    result_msg += f"<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (Feedback):</b>\n{feedback_text}"

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å")],
            [KeyboardButton(text="‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(result_msg, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    await message.answer("üëá –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=kb)
    await state.update_data(last_question=question, last_grade=grade)
    await state.set_state(TaskState.waiting_for_answer) 

# --------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI
# --------------------------

async def generate_question(grade: str, topic: str, name: str) -> str:
    prompt = (
        f"–ü—Ä–∏–¥—É–º–∞–π –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Ä–æ–≤–Ω—è {grade} –ø–æ —Ç–µ–º–µ {topic}. "
        f"–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–µ–π—Å–∞, —Å —Ü–∏—Ñ—Ä–∞–º–∏, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏, –≤–≤–æ–¥–Ω–æ–π. "
        f"–î–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: –∫—Ç–æ –ø—Ä–æ–¥—É–∫—Ç, –∫–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–¥—É–∫—Ç. "
        f"–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ ‚Äî –Ω–µ —Å—É—Ö–∞—è, –∞ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –¥–∞—ë—à—å –∑–∞–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–≥–µ –ø–æ –∏–º–µ–Ω–∏ {name}. "
        f"–ú–∞–∫—Å–∏–º—É–º 800 —Å–∏–º–≤–æ–ª–æ–≤."
    )

    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": (
                    "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –ø–æ –Ω–∞–π–º—É –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. "
                    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –∂–∏–≤—ã–µ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ, –ø–æ–ª–µ–∑–Ω—ã–µ –∫–µ–π—Å—ã. "
                    "–§–æ—Ä–º—É–ª–∏—Ä—É–π –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫: —Å —Ç–µ–ø–ª–æ—Ç–æ–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –ë–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π."
                )},
                {"role": "user", "content": prompt}
            ],
            max_tokens=350,
            temperature=0.8
        )
        question_text = response.choices[0].message.content.strip()
        return question_text[:797] + "..." if len(question_text) > 800 else question_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞."

async def evaluate_answer(question: str, student_answer: str, student_name: str) -> str:
    prompt = (
        f"–í–æ–ø—Ä–æ—Å: {question}\n"
        f"–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_answer}\n\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ö–µ–º–µ. "
        "–í—Å–µ–≥–æ 5 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤. –ö–∞–∂–¥—ã–π –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –æ—Ç 0 –¥–æ 0.2 –±–∞–ª–ª–æ–≤ (—à–∞–≥ 0.05). "
        "–ï—Å–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–ø—Ä–æ—Å—É' —Ä–∞–≤–µ–Ω 0.0 ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è, –∏ –∏—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ = 0.0. "
        "–ï—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 0.0, –æ—Ü–µ–Ω–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 4 –∫—Ä–∏—Ç–µ—Ä–∏—è.\n\n"
        "–ö—Ä–∏—Ç–µ—Ä–∏–∏:\n"
        "‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–ø—Ä–æ—Å—É\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞\n"
        "‚Ä¢ –ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è\n"
        "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞\n"
        "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã\n\n"
        "–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ö—Ä–∏—Ç–µ—Ä–∏–∏:\n"
        "‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–ø—Ä–æ—Å—É: <–±–∞–ª–ª>\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞: <–±–∞–ª–ª>\n"
        "‚Ä¢ –ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è: <–±–∞–ª–ª>\n"
        "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: <–±–∞–ª–ª>\n"
        "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: <–±–∞–ª–ª>\n\n"
        "–ò—Ç–æ–≥: <—Å—É–º–º–∞ –±–∞–ª–ª–æ–≤>\n"
        "Feedback: <—Ç–µ–∫—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>\n\n"
        "–ü–æ—è—Å–Ω–∏ –≤ Feedback, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ç–∞–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—á—ë—Ç—ã), –∏–ª–∏ –ø–æ—Ö–≤–∞–ª–∏ –∑–∞ —Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É (–µ—Å–ª–∏ –≤—Å—ë –æ–∫)."
    )

    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —Å—Ç—Ä–æ–≥–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è, —Å—Ä–∞–∑—É –¥–∞–≤–∞–π –æ—Ü–µ–Ω–∫—É –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=450,
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞."

async def generate_correct_answer(question: str, grade: str) -> str:
    prompt = (
        f"–ü—Ä–∏–≤–µ–¥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è {grade} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n\n"
        f"{question}\n\n"
        "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–µ–ª—É, –±–µ–∑ –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏–ª–∏ –ª–∏—à–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π. –î–∞–π —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –±–µ–∑ –æ—Ü–µ–Ω–æ–∫, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
                },
                {"role": "user", "content": prompt}
            ],
            max_tokens=1000,
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."

async def transcribe_audio(file_path: str) -> str:
    with open(file_path, "rb") as audio_file:
        response = await asyncio.to_thread(
            client.audio.transcriptions.create,
            model="whisper-1",
            file=audio_file,
            language="ru"
        )
    return response.text

# --------------------------
# –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –ø—Ä–∏ –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–Ω–µ FSM
# --------------------------

@router.message()
async def catch_all(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state is None:
        user = await get_user_from_db(message.from_user.id)

        if user:
            await state.clear()

            await message.answer("üëã –ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å —Å–ø—É—Å—Ç—è –≤—Ä–µ–º—è!", reply_markup=ReplyKeyboardRemove())
            await message.answer(
                f"üéì –£—Ä–æ–≤–µ–Ω—å: {user['level']} | ‚≠ê –ë–∞–ª–ª—ã: {user['points']}\n\n"
                "–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üöÄ –ì–æ—Ç–æ–≤, –ø–æ–≥–Ω–∞–ª–∏!")]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
        else:
            await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            await state.set_state(RegisterState.name)

async def get_or_generate_analytics(user_id: int):
    async with db_pool.acquire() as conn:
        existing = await conn.fetchrow(
            "SELECT * FROM analytics WHERE user_id = $1", user_id
        )
        if existing:
            return existing

        # –ü—Ä–∏–º–µ—Ä–Ω–æ —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        averages = await conn.fetchrow('''
            SELECT 
                ROUND(AVG(score)::numeric, 2) as avg_score
            FROM answers
            WHERE user_id = $1
        ''', user_id)


        # –ó–∞–≥–ª—É—à–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º ‚Äî —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∑–∂–µ —ç—Ç–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        analytics = {
            "tasks_done": await conn.fetchval("SELECT COUNT(*) FROM answers WHERE user_id = $1", user_id),
            "average_score": averages["avg_score"] or 0,
            "criteria_relevance": 0.18,
            "criteria_completeness": 0.14,
            "criteria_argumentation": 0.16,
            "criteria_structure": 0.11,
            "criteria_examples": 0.08,
            "percentile": 68,
            "next_target": 15,
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        await conn.execute('''
            INSERT INTO analytics (user_id, tasks_done, average_score, 
            criteria_relevance, criteria_completeness, criteria_argumentation, 
            criteria_structure, criteria_examples, percentile, next_target)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
        ''', user_id, *analytics.values())

        return analytics

def format_progress_analytics(user, data):
    return (
        f"<b>üìä –¢–≤–æ—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</b>\n\n"
        f"<b>üìç –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω–æ:</b> {data['tasks_done']}\n"
        f"<b>üéì –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> {user['level']}\n"
        f"<b>‚≠ê –û–±—â–∏–π –±–∞–ª–ª:</b> {round(user['points'], 2)}\n\n"
        f"üîç <b>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:</b>\n\n"
        f"‚Ä¢ <b>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–ø—Ä–æ—Å—É:</b> {round(data['criteria_relevance'], 2)} / 0.20 ‚Äî —Ç—ã –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –≤ —Ç–æ—á–∫—É! üî•\n"
        f"‚Ä¢ <b>–ü–æ–ª–Ω–æ—Ç–∞:</b> {round(data['criteria_completeness'], 2)} ‚Äî –Ω–µ–º–Ω–æ–≥–æ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—à—å –º—ã—Å–ª—å –¥–æ –∫–æ–Ω—Ü–∞\n"
        f"‚Ä¢ <b>–ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è:</b> {round(data['criteria_argumentation'], 2)} ‚Äî —É —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ø–æ—á–∫–∏\n"
        f"‚Ä¢ <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞:</b> {round(data['criteria_structure'], 2)} ‚Äî –∏–Ω–æ–≥–¥–∞ —Ç–µ—Ä—è–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞\n"
        f"‚Ä¢ <b>–ü—Ä–∏–º–µ—Ä—ã:</b> {round(data['criteria_examples'], 2)} ‚Äî –¥–æ–±–∞–≤—å –±–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏\n\n"
        f"üéØ <b>–°—É–ø–µ—Ä—Å–∏–ª–∞:</b> –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Å—É—Ç—å –∑–∞–¥–∞—á–∏\n"
        f"üß± <b>–ó–æ–Ω–∞ —Ä–æ—Å—Ç–∞:</b> –ø—Ä–∏–º–µ—Ä—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞\n\n"
        f"üìà <b>–¢—ã –ª—É—á—à–µ, —á–µ–º {data['percentile']}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
        f"üß≠ <b>–¶–µ–ª—å:</b> +{data['next_target']} –±–∞–ª–ª–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è üöÄ\n\n"
        f"<i>üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é</i>"
    )

def detect_gpt_phrases(text: str) -> bool:
    suspicious_phrases = re.compile(
        r"—ç—Ç–æ –≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è|–¥–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç|"
        r"—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º–æ–∂–Ω–æ –æ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑–æ–≤–∞—Ç—å|–º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤|"
        r"—Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ|—ç—Ç–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ|–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å|"
        r"–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ª–æ–≥–∏—á–Ω—ã–º|–≤ —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞|"
        r"–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º —Å–∏—Ç—É–∞—Ü–∏—é, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π",
        re.IGNORECASE
    )
    return bool(suspicious_phrases.search(text))

# --------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# --------------------------

async def on_startup():
    await create_db_pool()
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(on_startup())
