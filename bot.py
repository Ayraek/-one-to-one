import os
import re
import logging
import asyncpg
from urllib.parse import urlparse
import asyncio
from dotenv import load_dotenv

from openai import OpenAI

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State

########################
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
########################

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# –î–æ–±–∞–≤—å—Ç–µ –≤ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMIN_IDS, –Ω–∞–ø—Ä–∏–º–µ—Ä "12345678,87654321"
ADMIN_IDS = os.getenv("ADMIN_IDS", "")
admin_ids = [int(x.strip()) for x in ADMIN_IDS.split(",")] if ADMIN_IDS else []
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
db_pool = None

async def create_db_pool():
    global db_pool
    url = os.getenv("DATABASE_URL")
    parsed = urlparse(url)
    db_pool = await asyncpg.create_pool(
        user=parsed.username,
        password=parsed.password,
        database=parsed.path.lstrip("/"),
        host=parsed.hostname,
        port=parsed.port or 5432
    )

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É users –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    async with db_pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY,
                username TEXT,
                name TEXT,
                age INTEGER,
                level TEXT,
                points REAL
            )
        ''')


########################
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –∫–ª–∏–µ–Ω—Ç–∞
########################

client = OpenAI(api_key=OPENAI_API_KEY)

########################
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
########################

logging.basicConfig(level=logging.INFO)

########################
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
########################

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

########################
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
########################

LEVELS = ["Junior", "Middle", "Senior", "Head of Product", "CPO", "CEO"]

welcome_text = (
    "üí° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ \"One to One Booster bot\" ‚Äî –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ!"
)

# –¢–µ–º—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
TOPICS = [
    "–ì–∏–ø–æ—Ç–µ–∑—ã",
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "–ú–µ—Ç—Ä–∏–∫–∏",
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π",
    "Soft skills",
    "–°—Ç—Ä–∞—Ç–µ–≥–∏—è",
    "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–¥—É–∫—Ç—É"
]

########################
# –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é
########################

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="task")],
        [InlineKeyboardButton(text="üìù –≠–∫–∑–∞–º–µ–Ω", callback_data="exam")],
        [InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_grades_menu():
    keyboard = [
        [InlineKeyboardButton(text="üë∂ Junior", callback_data="grade_Junior")],
        [InlineKeyboardButton(text="üßë Middle", callback_data="grade_Middle")],
        [InlineKeyboardButton(text="üë®‚Äçüíº Senior", callback_data="grade_Senior")],
        [InlineKeyboardButton(text="üíº Head of Product", callback_data="grade_Head of Product")],
        [InlineKeyboardButton(text="üìä CPO", callback_data="grade_CPO")],
        [InlineKeyboardButton(text="üöÄ CEO", callback_data="grade_CEO")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_topics_menu():
    buttons = []
    for topic in TOPICS:
        buttons.append([InlineKeyboardButton(text=topic, callback_data=f"topic_{topic}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choose_grade")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_exam_menu():
    keyboard = [[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_news_menu():
    keyboard = [[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_show_answer_menu():
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question")],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)
@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    user = await get_user_from_db(callback.from_user.id)
    if user:
        username = user["username"]
        name = user["name"]
        age = user["age"]
        level = user["level"]
        points = user["points"]
        text = (
            f"<b>üë§ –ò–º—è:</b> {name}\n"
            f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
            f"<b>üéØ –£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
            f"<b>‚≠ê –ë–∞–ª–ª—ã:</b> {points}\n"
        )
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_main_menu())
    else:
        await callback.message.edit_text(welcome_text, reply_markup=get_main_menu())
    await callback.answer()

########################
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
########################

async def add_user_to_db(user_id: int, username: str, name: str, age: int):
    async with db_pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY,
                username TEXT,
                name TEXT,
                age INTEGER,
                level TEXT,
                points REAL
            )
        ''')
        await conn.execute('''
            INSERT INTO users (id, username, name, age, level, points)
            VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (id) DO NOTHING
        ''', user_id, username, name, age, "Junior", 0.0)

async def get_user_from_db(user_id: int):
    async with db_pool.acquire() as conn:
        return await conn.fetchrow('SELECT * FROM users WHERE id = $1', user_id)

async def update_user_points(user_id: int, additional_points: float):
    async with db_pool.acquire() as conn:
        await conn.execute(
            'UPDATE users SET points = points + $1 WHERE id = $2',
            additional_points, user_id
        )

async def update_level(user_id: int):
    user = await get_user_from_db(user_id)
    if not user:
        return
    current_level = user["level"]
    points = user["points"]
    cur_index = LEVELS.index(current_level)
    required_points = 50 * (cur_index + 1)
    if points >= required_points and cur_index < len(LEVELS) - 1:
        new_level = LEVELS[cur_index + 1]
        async with db_pool.acquire() as conn:
            await conn.execute(
                'UPDATE users SET level = $1 WHERE id = $2',
                new_level, user_id
            )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—à–µ–Ω —Å {current_level} –¥–æ {new_level}.")

########################
# –°–æ—Å—Ç–æ—è–Ω–∏—è
########################

class RegisterState(StatesGroup):
    name = State()
    age = State()

class TaskState(StatesGroup):
    waiting_for_answer = State()

########################
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
########################

@router.message(lambda msg: msg.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    user = await get_user_from_db(message.from_user.id)
    if user is None:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer_photo(
            photo="https://i.imgur.com/zIPzQKF.jpeg",
            caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ One to One IT Academy!"
        )
        await message.answer("üëã –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(RegisterState.name)
    else:
        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        username, name, age, level, points = user["username"], user["name"], user["age"], user["level"], user["points"]
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n{welcome_text}", reply_markup=get_main_menu())

@router.message(RegisterState.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegisterState.age)

@router.message(RegisterState.age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    data = await state.get_data()
    name = data.get("name")
    await add_user_to_db(message.from_user.id, message.from_user.username or "", name, int(message.text))
    await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_menu())
    await state.clear()

@router.message(lambda msg: msg.text == "/ping")
async def cmd_ping(message: Message):
    await message.answer("üèì Pong!")

########################
# –ê–¥–º–∏–Ω–∫–∞
########################

@router.message(lambda message: message.text == "/admin")
async def admin_panel(message: Message, state: FSMContext):
    if message.from_user.id not in admin_ids:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await message.answer("üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=get_admin_menu())

def get_admin_menu():
    keyboard = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üí¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery):
    try:
        async with db_pool.acquire() as conn:
            row = await conn.fetchrow("SELECT COUNT(*) FROM users")
            count = row[0]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        count = "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}"
    await callback.message.edit_text(text, reply_markup=get_admin_menu())
    await callback.answer()

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=get_admin_menu())
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    user = await get_user_from_db(callback.from_user.id)
    if user:
        username, name, age, level, points = user["username"], user["name"], user["age"], user["level"], user["points"]
        text = (
            f"<b>üë§ –ò–º—è:</b> {name}\n"
            f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
            f"<b>üéØ –£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
            f"<b>‚≠ê –ë–∞–ª–ª—ã:</b> {points}\n"
        )
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_main_menu())
    else:
        await callback.message.edit_text(welcome_text, reply_markup=get_main_menu())
    await callback.answer()

########################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ "–ù–æ–≤–æ—Å—Ç–∏" –∏ "–≠–∫–∑–∞–º–µ–Ω"
########################

@router.callback_query(F.data == "news")
async def news_callback(callback: CallbackQuery):
    text = (
        "üì∞ –ù–æ–≤–æ—Å—Ç–∏:\n\n"
        "–ë–æ—Ç —Å–µ–π—á–∞—Å —É–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É, –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –∏ –≤—ã–¥–∞–≤–∞—Ç—å —Ñ–∏–¥–±—ç–∫.\n\n"
        "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–µ—Ç—Å—è:\n"
        "‚Ä¢ –†–∞–∑–¥–µ–ª —ç–∫–∑–∞–º–µ–Ω –ø–æ –∫–∞–∂–¥–æ–º—É –≥—Ä–µ–π–¥—É\n"
        "‚Ä¢ –í—ã–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ —Å–ª–∞–±—ã–º–∏ –º–µ—Å—Ç–∞–º–∏\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–Ω–∏–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞—Ä–ø–ª–∞—Ç –ø–æ —Ä—ã–Ω–∫—É\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_news_menu())
    await callback.answer()

def get_news_menu():
    keyboard = [[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data == "exam")
async def exam_callback(callback: CallbackQuery):
    text = (
        "üìù –†–∞–∑–¥–µ–ª –≠–∫–∑–∞–º–µ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_exam_menu())
    await callback.answer()

def get_exam_menu():
    keyboard = [[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

########################
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: –≤—ã–±–æ—Ä –≥—Ä–µ–π–¥–∞ –∏ —Ç–µ–º—ã
########################

@router.callback_query(F.data == "task")
async def task_callback(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–µ–π–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=get_grades_menu())
    await callback.answer()

@router.callback_query(F.data.startswith("grade_"))
async def handle_grade_selection(callback: CallbackQuery, state: FSMContext):
    selected_grade = callback.data.replace("grade_", "").strip()
    user = await get_user_from_db(callback.from_user.id)
    if not user:
        await callback.message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", reply_markup=get_main_menu())
        await callback.answer()
        return
    current_level = user["level"]
    if selected_grade != current_level:
        await callback.message.answer(
            f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}.",
            reply_markup=get_main_menu()
        )
        await callback.answer()
        return
    await state.update_data(selected_grade=selected_grade)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:", reply_markup=get_topics_menu())
    await callback.answer()

@router.callback_query(F.data == "choose_grade")
async def back_to_grades(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–µ–π–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=get_grades_menu())
    await callback.answer()

@router.callback_query(F.data.startswith("topic_"))
async def handle_topic_selection(callback: CallbackQuery, state: FSMContext):
    chosen_topic = callback.data.replace("topic_", "").strip()
    data = await state.get_data()
    selected_grade = data.get("selected_grade")
    if not selected_grade:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –≥—Ä–µ–π–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=get_grades_menu())
        await callback.answer()
        return
    question = await generate_question(selected_grade, chosen_topic)
    await state.set_state(TaskState.waiting_for_answer)
    await state.update_data(question=question, grade=selected_grade, last_score=0.0)
    await callback.message.edit_text(
        f"üí¨ –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è {selected_grade} –ø–æ —Ç–µ–º–µ ¬´{chosen_topic}¬ª:\n\n"
        f"{question}\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )
    await callback.answer()

########################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
########################

@router.message(TaskState.waiting_for_answer)
async def handle_task_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data:
        await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    grade = data.get("grade")
    question = data.get("question")
    last_score = data.get("last_score", 0.0)
    user = await get_user_from_db(message.from_user.id)
    if not user:
        await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start.")
        return
    student_name = user["name"]
    feedback_raw = await evaluate_answer(question, message.text, student_name)
    logging.info(f"RAW FEEDBACK:\n{feedback_raw}")
    pattern = r"–ö—Ä–∏—Ç–µ—Ä–∏–∏:\s*(.*?)Score:\s*([\d.]+)\s*Feedback:\s*(.*)"
    match = re.search(pattern, feedback_raw, re.DOTALL)
    if match:
        criteria_block = match.group(1).strip()
        try:
            new_score = float(match.group(2))
        except ValueError:
            new_score = 0.0
        feedback_text = match.group(3).strip()
    else:
        criteria_block = ""
        new_score = 0.0
        feedback_text = feedback_raw.strip()
    if new_score > last_score:
        diff = new_score - last_score
        await update_user_points(message.from_user.id, diff)
        await update_level(message.from_user.id)
        await state.update_data(last_score=new_score)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry"),
         InlineKeyboardButton(text="‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", callback_data="show_answer")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    result_msg = ""
    if criteria_block:
        result_msg += f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–∏:</b>\n{criteria_block}\n\n"
    result_msg += f"<b>–û—Ü–µ–Ω–∫–∞ (Score):</b> {new_score}\n\n"
    result_msg += f"<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (Feedback):</b>\n{feedback_text}"
    if len(result_msg) > 4000:
        chunks = [result_msg[i:i+4000] for i in range(0, len(result_msg), 4000)]
        for i, chunk in enumerate(chunks):
            if i == len(chunks) - 1:
                await message.answer(chunk, parse_mode="HTML", reply_markup=keyboard)
            else:
                await message.answer(chunk, parse_mode="HTML")
    else:
        await message.answer(result_msg, parse_mode="HTML", reply_markup=keyboard)
    await state.update_data(last_question=question, last_grade=grade)

########################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
########################

@router.callback_query(F.data == "show_answer")
async def show_correct_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    question = data.get("last_question")
    grade = data.get("last_grade")
    if not question or not grade:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–∞.", reply_markup=get_main_menu())
        await callback.answer()
        return
    correct = await generate_correct_answer(question, grade)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" –∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    await callback.message.answer(
        f"‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —É—Ä–æ–≤–Ω—è {grade}:\n\n{correct}",
        parse_mode="HTML",
        reply_markup=get_show_answer_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
@router.callback_query(F.data == "next_question")
async def next_question_handler(callback: CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∑–∞–¥–∞–Ω–∏—è (–≥—Ä–µ–π–¥–∞)
    await state.clear()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–µ–π–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=get_grades_menu())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞" (retry)
@router.callback_query(F.data.startswith("topic_"))
async def handle_topic_selection(callback: CallbackQuery, state: FSMContext):
    chosen_topic = callback.data.replace("topic_", "").strip()
    data = await state.get_data()
    selected_grade = data.get("selected_grade")
    if not selected_grade:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –≥—Ä–µ–π–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=get_grades_menu())
        await callback.answer()
        return

    user = await get_user_from_db(callback.from_user.id)
    name = user["name"] if user else "–∫–∞–Ω–¥–∏–¥–∞—Ç"
    question = await generate_question(selected_grade, chosen_topic, name)

    await state.set_state(TaskState.waiting_for_answer)
    await state.update_data(question=question, grade=selected_grade, last_score=0.0)
    await callback.message.edit_text(
        f"üí¨ –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è {selected_grade} –ø–æ —Ç–µ–º–µ ¬´{chosen_topic}¬ª:\n\n"
        f"{question}\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )
    await callback.answer()

########################
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI
########################

async def generate_question(grade: str, topic: str, name: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å —Ü–∏—Ñ—Ä–∞–º–∏, –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
    """
    prompt = (
        f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –ø–æ –Ω–∞–π–º—É –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Ç–æ–ø–æ–≤—ã—Ö –ò–¢-–∫–æ–º–ø–∞–Ω–∏—è—Ö –†–æ—Å—Å–∏–∏ "
        f"(–Ø–Ω–¥–µ–∫—Å, VK, Ozon, –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –°–±–µ—Ä). –°–µ–π—á–∞—Å —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å –æ–Ω–ª–∞–π–Ω-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –ø–æ –∏–º–µ–Ω–∏ {name}.\n\n"
        f"–ü–æ–∑–∏—Ü–∏—è: Product Manager —É—Ä–æ–≤–Ω—è {grade} –≤ B2C-–∫–æ–º–ø–∞–Ω–∏–∏. –¢–µ–º–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è: {topic}.\n\n"
        f"–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–¥–∏–Ω –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –≤–æ–ø—Ä–æ—Å, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫–µ–π—Å–µ, —Å —Ü–∏—Ñ—Ä–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∑–∞–¥–∞—á–µ–π. "
        f"–§–æ—Ä–º–∞—Ç ‚Äî —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, –Ω–µ —Å—É—Ö–æ–π. –ö–∞–∫ –±—É–¥—Ç–æ —Ç—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∑–∞–¥–∞—ë—à—å –≤–æ–ø—Ä–æ—Å –≤ Zoom.\n\n"
        f"üí¨ –ü—Ä–∏–º–µ—Ä:\n"
        f"¬´{name}, –≤ –ø—Ä–æ–¥—É–∫—Ç–µ –• –º—ã –≤–∏–¥–∏–º —Ä–æ—Å—Ç churn –Ω–∞ 30% –∏ –ø–∞–¥–µ–Ω–∏–µ Retention D7 —Å 40% –¥–æ 25%. –ö–∞–∫ –±—ã —Ç—ã –ø–æ–¥–æ—à—ë–ª –∫ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?¬ª\n\n"
        f"üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        f"- –û–±—Ä–∞—Ç–∏—Å—å –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –ø–æ –∏–º–µ–Ω–∏: {name}\n"
        f"- –ù–µ –ø–∏—à–∏ —Å–ª–æ–≤–æ '–í–æ–ø—Ä–æ—Å:'\n"
        f"- –ù–µ –¥–∞–≤–∞–π –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —Å–∞–º –≤–æ–ø—Ä–æ—Å\n"
        f"- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ)\n"
        f"- –ë–µ–∑ Markdown –∏ *–∑–≤—ë–∑–¥–æ—á–µ–∫*\n"
    )

    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –∂–∏–≤–æ–π –∏ –≤–µ–∂–ª–∏–≤—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä, —Å–æ–±–µ—Å–µ–¥—É–µ—à—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ó–∞–¥–∞—ë—à—å –≤–æ–ø—Ä–æ—Å—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏, —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ –∏–º–µ–Ω–∏, –ø—Ä–∏–∫–ª–∞–¥–Ω–æ –∏ –ø–æ –¥–µ–ª—É."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=300,
            temperature=0.8
        )
        question_text = response.choices[0].message.content.strip()
        if len(question_text) > 800:
            question_text = question_text[:797] + "..."
        return question_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞."

async def evaluate_answer(question: str, student_answer: str, student_name: str) -> str:
    prompt = (
        f"–í–æ–ø—Ä–æ—Å: {question}\n"
        f"–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_answer}\n\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ 5 –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n"
        "1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–ø—Ä–æ—Å—É\n"
        "2. –ü–æ–ª–Ω–æ—Ç–∞\n"
        "3. –ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è\n"
        "4. –°—Ç—Ä—É–∫—Ç—É—Ä–∞\n"
        "5. –ü—Ä–∏–º–µ—Ä—ã\n\n"
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ, ‚ö†Ô∏è –∏–ª–∏ ‚ùå.\n"
        "–û–ø—Ä–µ–¥–µ–ª–∏ –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É (Score) –æ—Ç 0.0 –¥–æ 1.0. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5).\n\n"
        "–í—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ö—Ä–∏—Ç–µ—Ä–∏–∏:\n"
        "üîπ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–ø—Ä–æ—Å—É: <—ç–º–æ–¥–∂–∏>\n"
        "üîπ –ü–æ–ª–Ω–æ—Ç–∞: <—ç–º–æ–¥–∂–∏>\n"
        "üîπ –ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è: <—ç–º–æ–¥–∂–∏>\n"
        "üîπ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: <—ç–º–æ–¥–∂–∏>\n"
        "üîπ –ü—Ä–∏–º–µ—Ä—ã: <—ç–º–æ–¥–∂–∏>\n\n"
        "Score: <—á–∏—Å–ª–æ>\n"
        "Feedback: –í–∞—à –æ—Ç–≤–µ—Ç... (–æ–±—Ä–∞—Ç–∏—Å—å –∫ —Å—Ç—É–¥–µ–Ω—Ç—É –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞)\n"
    )
    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, —Å—Ç—Ä–æ–≥–æ –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π –æ—Ç–≤–µ—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=450,
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞."

async def generate_correct_answer(question: str, grade: str) -> str:
    prompt = (
        f"–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É—Ä–æ–≤–Ω—è {grade}.\n\n"
        f"–í–æ–ø—Ä–æ—Å: {question}\n\n"
        "–û–±—ä—è—Å–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –ø—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã, –ø–æ—á–µ–º—É –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. "
        "–û—Ç–≤–µ—á–∞–π –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –æ–±—Ä–∞—â–∞—è—Å—å –∫ —Å—Ç—É–¥–µ–Ω—Ç—É –∫–∞–∫ '–í–∞—à –æ—Ç–≤–µ—Ç...'. "
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤–µ–∑–¥–æ—á–∫–∏ (*)."
    )
    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤–µ–∑–¥–æ—á–∫–∏."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1000,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."

########################
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
########################

async def on_startup():
    await create_db_pool()
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(on_startup())
