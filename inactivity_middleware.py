import time
from aiogram import BaseMiddleware, types
from aiogram.fsm.context import FSMContext
import logging

class InactivityMiddleware(BaseMiddleware):
    """
    Middleware, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ 15 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
    –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ ‚Äì –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ.
    """
    async def __call__(self, handler, event, data):
        state: FSMContext = data.get("state")
        now = time.time()

        if state:
            state_data = await state.get_data()
            last_active = state_data.get("last_active")
            if last_active is None or (now - last_active > 900):  # 900 —Å–µ–∫—É–Ω–¥ = 15 –º–∏–Ω—É—Ç
                logging.info("[InactivityMiddleware] –í—Ä–µ–º—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫–ª–æ. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
                await state.clear()
                if isinstance(event, types.Message):
                    await event.answer("üîÑ –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç –±–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å.")
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await state.update_data(last_active=now)
        return await handler(event, data)
