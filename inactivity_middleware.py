import time
import logging
from aiogram import BaseMiddleware, types, Bot
from aiogram.fsm.context import FSMContext

class InactivityMiddleware(BaseMiddleware):
    def __init__(self, timeout_seconds=900):
        super().__init__()
        self.timeout = timeout_seconds  # 900 —Å–µ–∫—É–Ω–¥ = 15 –º–∏–Ω—É—Ç

    async def __call__(self, handler, event, data):
        state: FSMContext = data.get("state")
        bot: Bot = data.get("bot")
        now = time.time()

        if state:
            state_data = await state.get_data()
            last_active = state_data.get("last_active")
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —É—Å—Ç–∞–Ω–æ–≤–∏–º –µ–≥–æ —Å–µ–π—á–∞—Å
            if last_active is None:
                await state.update_data(last_active=now)
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç
            elif now - last_active > self.timeout:
                logging.info("[InactivityMiddleware] 15 –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è ‚Äì –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.")

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                bot_messages = state_data.get("bot_messages", [])
                for msg_id in bot_messages:
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id (–µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ Message –∏–ª–∏ CallbackQuery)
                        if isinstance(event, types.Message):
                            chat_id = event.chat.id
                        elif isinstance(event, types.CallbackQuery):
                            chat_id = event.message.chat.id
                        else:
                            continue
                        await bot.delete_message(chat_id=chat_id, message_id=msg_id)
                    except Exception as e:
                        logging.warning(f"[InactivityMiddleware] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—É–¥–∞–ª—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ)
                await state.clear()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
                keyboard = types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )

                if isinstance(event, types.Message):
                    await event.answer("üîÑ –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç –±–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.\n–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ¬ª –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞.", reply_markup=keyboard)
                elif isinstance(event, types.CallbackQuery):
                    await event.message.answer("üîÑ –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç –±–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.\n–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ¬ª –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞.", reply_markup=keyboard)
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è

            else:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –∏—Å—Ç–µ–∫–ª–æ ‚Äì –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                await state.update_data(last_active=now)

        return await handler(event, data)
