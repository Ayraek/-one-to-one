import time
import logging
from aiogram import BaseMiddleware, types, Bot
from aiogram.fsm.context import FSMContext

class InactivityMiddleware(BaseMiddleware):
    def __init__(self, timeout_seconds=900):
        super().__init__()
        self.timeout = timeout_seconds  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 900 —Å–µ–∫—É–Ω–¥ = 15 –º–∏–Ω—É—Ç

    async def __call__(self, handler, event, data):
        state: FSMContext = data.get("state")
        bot: Bot = data.get("bot")  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        now = time.time()

        if not state:
            return await handler(event, data)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        last_active = state_data.get("last_active")

        # –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?
        if last_active is None:
            # –ï—Å–ª–∏ –º—ã –Ω–µ –∑–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
            await state.update_data(last_active=now)
            return await handler(event, data)

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç
        if now - last_active > self.timeout:
            logging.info("[InactivityMiddleware] 15 –º–∏–Ω. –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.")

            # 1) –£–¥–∞–ª—è–µ–º –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è
            bot_messages = state_data.get("bot_messages", [])
            for msg_id in bot_messages:
                try:
                    # –¢–∏–ø —Å–æ–±—ã—Ç–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery; –æ–ø—Ä–µ–¥–µ–ª–∏–º chat_id
                    if isinstance(event, types.Message):
                        chat_id = event.chat.id
                    elif isinstance(event, types.CallbackQuery):
                        chat_id = event.message.chat.id
                    else:
                        continue
                    await bot.delete_message(chat_id=chat_id, message_id=msg_id)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

            # 2) –û—á–∏—â–∞–µ–º –≤—Å—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

            # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å–∏–º /start:
            if isinstance(event, types.Message):
                await event.answer(
                    "üîÑ –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç. –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
                )
            elif isinstance(event, types.CallbackQuery):
                await event.message.answer(
                    "üîÑ –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç. –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
                )
            return  # –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await state.update_data(last_active=now)

        # –ï—Å–ª–∏ –≤—Å—ë –æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–∞–ª—å—à–µ
        return await handler(event, data)
