import time
import logging
from aiogram import BaseMiddleware, types, Bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext

class InactivityMiddleware(BaseMiddleware):
    def __init__(self, timeout_seconds: int = 7200):
        super().__init__()
        self.timeout = timeout_seconds  # 7200 —Å–µ–∫—É–Ω–¥ = 2 —á–∞—Å–∞

    async def __call__(self, handler, event, data):
        state: FSMContext = data.get("state")
        bot: Bot = data.get("bot")
        now = time.time()

        if state:
            state_data = await state.get_data()
            last_active = state_data.get("last_active")

            # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
            if last_active is None:
                await state.update_data(last_active=now)

            # –ï—Å–ª–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª—å—à–µ —Ç–∞–π–º–∞—É—Ç–∞
            elif now - last_active > self.timeout:
                logging.info(f"[InactivityMiddleware] –ë–æ–ª–µ–µ {self.timeout} —Å–µ–∫ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è ‚Äî –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")

                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–æ—Ç–∞
                bot_messages = state_data.get("bot_messages", [])
                for msg_id in bot_messages:
                    try:
                        if isinstance(event, types.Message):
                            chat_id = event.chat.id
                        elif isinstance(event, types.CallbackQuery):
                            chat_id = event.message.chat.id
                        else:
                            continue
                        await bot.delete_message(chat_id=chat_id, message_id=msg_id)
                    except Exception as e:
                        logging.warning(f"[InactivityMiddleware] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                await state.clear()

                # –ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üöÄ –ì–æ—Ç–æ–≤, –ø–æ–≥–Ω–∞–ª–∏!")]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )

                text = (
                    f"üîÑ –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è. –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.\n"
                    "–ù–∞–∂–º–∏—Ç–µ ¬´üöÄ –ì–æ—Ç–æ–≤, –ø–æ–≥–Ω–∞–ª–∏!¬ª –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞."
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                if isinstance(event, types.Message):
                    await event.answer(text, reply_markup=keyboard)
                elif isinstance(event, types.CallbackQuery):
                    await event.message.answer(text, reply_markup=keyboard)

                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ö—ç–Ω–¥–ª–µ—Ä ‚Äî –¥–∞–ª—å—à–µ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø–æ–π–¥—ë—Ç
                return

            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                await state.update_data(last_active=now)

        # –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        return await handler(event, data)
