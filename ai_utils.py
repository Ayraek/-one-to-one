import openai
import asyncio
import logging

openai.api_key = "FAKE-KEY"  # заменишь позже

async def evaluate_answer(question: str, student_answer: str, student_name: str) -> str:
    prompt = (
        f"Вопрос: {question}\n"
        f"Ответ студента: {student_answer}\n\n"
        "Проанализируй ответ пользователя по следующей схеме. "
        "Всего 5 критериев. Каждый оценивается от 0 до 0.2 баллов (шаг 0.05). "
        "Если критерий 'Соответствие вопросу' равен 0.0 — остальные не учитываются, и итоговая оценка = 0.0. "
        "Если он больше 0.0, оцени остальные 4 критерия.\n\n"
        "Критерии:\n"
        "• Соответствие вопросу\n"
        "• Полнота\n"
        "• Аргументация\n"
        "• Структура\n"
        "• Примеры\n\n"
        "Ответ строго в формате:\n\n"
        "Критерии:\n"
        "• Соответствие вопросу: <балл>\n"
        "• Полнота: <балл>\n"
        "• Аргументация: <балл>\n"
        "• Структура: <балл>\n"
        "• Примеры: <балл>\n\n"
        "Итог: <сумма баллов>\n"
        "Feedback: <текстовая обратная связь для пользователя>\n\n"
        "Поясни в Feedback, что именно не так (если есть недочёты), или похвали за хорошую работу (если всё ок)."
    )
    try:
        response = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Ты строгий преподаватель."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=450,
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"Ошибка оценки ответа: {e}")
        return "❌ Ошибка оценки ответа."

async def generate_question(grade: str, topic: str, name: str) -> str:
    """
    Генерирует задание для продакта по грейду и теме.
    Особая логика для Soft skills и Управление командой.
    """
    # Специальный промпт для Soft skills
    if topic == "Soft skills":
        user_prompt = f"""
Придумай **уникальное**, практическое задание для продакт-менеджера уровня {grade} по теме «Soft skills». 
Сфокусируйся на одном из навыков: **лидерство**, **ответственность**, **разрешение конфликтов**, **внутренняя мотивация**, **рациональность**.
Формат:
1) Краткая ролевая ситуация (кто участвует, в чем проблема).
2) Конкретная задача для PM (что должен сделать, какие действия предпринять).
3) Аналитический вопрос: «Что здесь не так и почему?» или «Как улучшить ситуацию?» 
Дай только текст задания, до 800 символов, без приветствий.
        """.strip()

    # Специальный промпт для Управление командой
    elif topic == "Управление командой":
        user_prompt = f"""
Придумай **реалистичный** кейс для продакт-менеджера уровня {grade} по теме «Управление командой». 
Включи:
- Описание текущей ситуации (размер команды, роли, проект, узкие места).
- Задачу по корректировке работы команды или оптимизации ресурсов.
- Вопрос-оценку: «Какие инструменты (Scrum, Kanban и т.п.) ты внедришь и почему?» 
Дай только текст задания, до 800 символов, без вводных.
        """.strip()

    # Универсальный промпт для всех остальных тем
    else:
        user_prompt = f"""
Придумай **уникальный**, реалистичный кейс для продакт-менеджера уровня {grade} по теме «{topic}». Обязательно:
1. Укажи компанию (стартап, B2C/B2B, финтех, edtech, e-commerce и т.п.).
2. Опиши команду (размер, роли), бюджет/время, ограничения.
3. Сформулируй задачу, отражающую навык в теме «{topic}».
4. Не повторяй предыдущие примеры — каждый кейс должен быть **новым**.
5. Дай только текст задания (до 800 символов), без приветствий и списков «Пожалуйста…».
        """.strip()

    try:
        response = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "Ты — опытный интервьюер и наставник по продакт-менеджменту. "
                        "Генерируешь короткие (до 800 символов), но ёмкие и разнообразные кейсы. "
                        "Каждый раз сценарий должен быть новым и соответствовать теме и грейду."
                    )
                },
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=350,
            temperature=0.9
        )
        text = response.choices[0].message.content.strip()
        return text[:800] if len(text) > 800 else text

    except Exception as e:
        logging.error(f"Ошибка генерации вопроса: {e}")
        return "❌ Ошибка генерации вопроса. Попробуйте чуть позже."
    
async def generate_correct_answer(question: str, grade: str) -> str:
    prompt = (
        f"Приведи полностью развернутый правильный ответ для уровня {grade} на следующий вопрос:\n\n"
        f"{question}\n\n"
        "Отвечай строго по делу, без оценочных комментариев, приветствий или лишних пояснений. Дай только эталонное решение."
    )
    try:
        response = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "Ты опытный преподаватель продакт-менеджмента. Твой ответ должен содержать только правильное, структурированное и подробное решение, без оценок, приветствий и лишних комментариев."
                },
                {"role": "user", "content": prompt}
            ],
            max_tokens=1000,
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"Ошибка генерации эталонного ответа: {e}")
        return "❌ Ошибка генерации эталонного ответа."
    
__all__ = ["evaluate_answer", "generate_question", "generate_correct_answer"]
